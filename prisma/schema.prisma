 


// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN @map("admin")
  USER  @map("user")
  TEACHER @map("teacher")
}

model user {
  id          String   @id @default(uuid())
  name        String?
  email       String   @unique
  password    String
  image       String?
  phone       String?
  role        Role
  country     String?
  city        String?
  state       String?
  zip_code    String?
  address     String?
  about       String?
  is_deleted  Boolean?
  is_modified Boolean? @ignore
  otp         String
  refreshToken String?
  createdAt    DateTime  @default(now())
  Course Course[] @relation("courseInstructors")
  Payment Payment[]
  @@index([name(sort: Asc), email(sort: Asc)])
  @@map("users")

}

model Coursecategory {
  id    String    @id @default(uuid())
  name  Json
  description Json?
  createdAt         DateTime @default(now())
  status Boolean 
  Course Course[]
}
model Course {
  id           String       @id @default(uuid())
  name         Json
  price        Float?
  rate         Float?
  description  Json?   
  duration     String?
  time         String?
  days         Json? // JSON type
  place        String?
  createdAt    DateTime  @default(now())
  sit          Int?
  enrollment   Int?
  status       Boolean   @default(true)
  image        String?
  categoryId   String?      
  category     Coursecategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currency_code String?
  currency_symbol String?
  instructors user[] @relation("courseInstructors")
  Payment Payment[]
}





model Setting {
  id                    String  @id @default(uuid())
  site_name             String?
  site_email            String?
  site_phone            String?
  site_logo             String?
  site_address          String?
  site_description      String?
  site_footer           String?
  client_side_url       String?
  server_side_url       String?


  stripe            Json?
  paypal            Json?
  razorpay          Json?
  mollie            Json?
  social_media_link Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("settings")
}





model otp {
  id         String   @id @default(uuid())
  identifier String
  action     String
  otp        String
  createdAt  DateTime @default(now())
}


model JobCategory{
    id         String   @id @default(uuid())
    name Json
    description Json?
    status Boolean 
    job Job[]
    createdAt         DateTime @default(now())

}
model Job{
    id         String   @id @default(uuid())
    title Json
    company_name Json
    job_position Json
    categoryId String 
    category JobCategory @relation(fields: [categoryId],references: [id],onUpdate: Cascade,onDelete: Cascade)
    vacancy Int?
    job_context Json?
    job_responsibility Json?
    educational_requirement Json?
    additional_requirements Json?
    salary Int?
    deadLine DateTime?
    status Boolean
    jobType String?
    author_name Json
    job_location Json?
    createdAt         DateTime @default(now())
    applyJob applyJob[]

}


model language{
  id String @id @default(uuid())
  name String
  code String
  rtl Boolean?
  flag String?
  translations Json?
  active Boolean?
  default Boolean?
  createdAt         DateTime @default(now())
}
model applyJob{
    id String @id @default(uuid())
    name String
    email String?
    phone String
    cover_letter String?
    resume String?
    JobId String
    Job Job @relation(fields: [JobId],references: [id],onDelete: Cascade,onUpdate: Cascade)
    createdAt         DateTime @default(now())

}

model Payment {
  id              String   @id @default(cuid())
  amount          Float
  status          String @default("pending")     // example: "open", "paid", "failed", "canceled"
  payment_method  String
  currency_code   String
  course_id       String
  user_id         String
  transaction_id  String?    // Mollie বা অন্য gateway এর unique payment ID
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

 
   user   user   @relation(fields: [user_id], references: [id])
   course Course @relation(fields: [course_id], references: [id])
}
