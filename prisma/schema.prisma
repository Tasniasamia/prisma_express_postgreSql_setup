// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN @map("admin")
  USER  @map("user")
  TEACHER @map("teacher")
}

model user {
  id          String   @id @default(uuid())
  name        String?
  email       String   @unique
  password    String
  image       String?
  phone       String?
  role        Role
  country     String?
  city        String?
  state       String?
  zip_code    String?
  address     String?
  about       String?
  is_deleted  Boolean?
  is_modified Boolean? @ignore
  otp         String
  refreshToken String?
  @@index([name(sort: Asc), email(sort: Asc)])
  @@map("users")
}

model Setting {
  id                    String  @id @default(uuid())
  site_name             String?
  site_email            String?
  site_phone            String?
  site_logo             String?
  site_address          String?
  site_description      String?
  site_footer           String?
  client_side_url       String?
  server_side_url       String?
  otp_verification_type String? // "email" | "phone"

  // Relation fields
  email_config_id String? @unique
  cloud_config_id String? @unique

  email_config EmailConfig? @relation(fields: [email_config_id], references: [id])
  cloud_config CloudConfig? @relation(fields: [cloud_config_id], references: [id])

  stripe            Json?
  paypal            Json?
  razorpay          Json?
  mollie            Json?
  social_media_link Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("settings")
}

model EmailConfig {
  id             String   @id @default(uuid())
  resend_api_key String
  resend_email   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  setting Setting?
}

model CloudConfig {
  id         String   @id @default(uuid())
  cloud_name String
  api_key    String
  api_secret String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  setting Setting?
}

model otp {
  id         String   @id @default(uuid())
  identifier String
  action     String
  otp        String
  createdAt  DateTime @default(now())
}

enum Jobtype{
  REMOTE
  HYBRID
  ONSITE
}
model Job{
    id         String   @id @default(uuid())
    title String
    company_name String
    job_position String
    category JobCategory[] @relation("jobCategory")
    vacancy Int?
    job_context String?
    job_responsibility String?
    educational_requirement String?
    additional_requirements String?
    salary Int?
    deadLine DateTime?
    status Boolean
    jobType Jobtype @default(ONSITE)
    author_name String
    job_location String?
    createdAt         DateTime @default(now())

}
model JobCategory{
    id         String   @id @default(uuid())
    name String
    description String?
    status Boolean
    categoryId String @unique
    Job Job? @relation("jobCategory",fields: [categoryId],references: [id],onUpdate: Cascade,onDelete: Cascade)
    createdAt         DateTime @default(now())

}

model language{
  id String @id @default(uuid())
  name String
  code String
  rtl Boolean?
  translations Json?
  active Boolean?
  default Boolean?
    createdAt         DateTime @default(now())
}